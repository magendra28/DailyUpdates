=====26/11/2024=======YAML============
YAML YAML Aint markup language:it is a human-readable data serialization format commonly used for configuration files and data exchange between programming languages.
 key features of yaml
	1.human readable
	2.Hierarchical Structure:
Data is represented in a tree-like structure using indentation, making it easy to understand relationships between elements.
	3.Supports Multiple Data Types:
YAML can represent scalars (e.g., strings, numbers), lists, and dictionaries (key-value pairs).
	4.Widely Used in Configuration
	5.Compatible with JSON
	6.cross platforms can be used for different programing languages

Docker, Kubernetes ansible and terraform they use yaml as configuration file(if u want to give instructions to the Kubernetes then u need to write in yaml configuration)

YAML:-configuration management,data storage, and data serialization
yaml supports two extensions that is .yaml or yml
YAML is superset of json meaning valid json is also a valid YAML
yaml is case sensitive in nature

variables can be accessed using $() syntax, such as $(commonlibrary).
Special Syntax:
$(...): Used to refer to variables defined in the YAML file. For example, $(commonlibrary) resolves to sharedrepo.
/s: Likely indicates a relative path for a resource or directory in the build environment.

** inside a yaml file key should be unique

=====Sprint Boot backend concepts=========
inheritance types
1.mapped super class for this one annotation is @MappedSuperClass
2.joined table for this one no annotation we need to tell like @Inheritance(strategy="InheritanceType.JOINED")
3.table per class for this one no annotation we need to tell like @Inheritance(strategy="InheritanceType.TABLE_PER_CLAss")
4.single table for this one no annotation we need to tell like @Inheritance(strategy="InterianceType.SINGLE_TABLE")
and we will use one more annotation in single tabel that @DescriminatorColumn(name=""  descriminatorType="") and another @Descriminatorvalue(value="")

projections: Simple interface with getter methods

for defining the foreign key we use annotation as @PrimaryKeyJoinColum

if you have two service implementations of a service class it will give error
for resolving that error mark any service class as @Primary this is oneway ,another way is you give the name to the each serviceimplemettaion and in the controller class use @Qualifier annotation and provide the name of the service which you want to use

=========17/10/2024=========
1.to avoid null pointer exception we are using Optional , this Optional is a bucket type if you get something it will return it, if u get null then it will return , we use this Optional<Class> in Repository class
eg:lets say u r find a product by Id using FindById(Long Id)--> this find by ID internally converts into sql query like select * from product where id=10 and it will return the product
 	Optiona<Product> findByID(Long ID);

2.it is kind of a way to avoid NullPointerException

3.save - we can use this save method for creating the products as well as updating the product
eg: Product save(Product product)-- so here if you pass a product without Id the save method created a new product in the database , and if a pass a product with ID it will update a product in the database and return the product

4.@GeneratedValue(Strategy=GenerationType.IDENTITY)--> what this does is suppose when u r adding a product in database without mentioning ID it will thro an error, so for not throwing the error we use @GeneratedVAlue to
autoincrement the ID 

what is FetchType:-
	lazy and eager
1.eager is used only when u have single attribute
2.lazy is used when u have collection of things or products whatever

HQL and SQL--
	Hibernate query language --> it is a combination of SQL + OOPs
	structured query language

=======19/10/2024=================
Representing cardinality
	1.mapped by 
	2.cascade
schema versioning and migration
====20/10/2024==================
TDD:->test driven development(first write all the test cases and then implement the feature)
types of testing:
	1.unit testing
	2.integrational testing
	3.functional testing
flakey test case:->flakey means inconsistent or unreliable (n/w calls, concurrency, randomization)-flakey test cases happens - try not to have any flakey test cases in your code

** testing good practices
	Arrange, Act, Assert
	create, call, check
Based on 3A framework we will write the test case
	Arrange(creating the data variables assign the data variables etc eg: int i=10)
	Act(calling the appropriate function to execute something on the variables which u arranged)
	Assert(check against the expected value-which is generated by ACT)
-- in one test case we can have multiple assert statements

if we want to use spring frame work we need to give @SpringBootTest annotation in test cases files
===21/10/2024========
RBAC:->role based access control
authentication(verification simply means that who you are),authorization(permission)
Bcrypt algo
JWT Token:

=========22/10/2024============
validate your identity using google(called as Auth providers) on any third party application(Eg;sign in on PUBG using gmails)
OAuth: it is framework and  way to Industry wide followed standard for authorization
	1.it is like an API contract with respect to  authorization
How OAuth works:-

project userservice:
1.low level design first like 

===24/10/2024=========
why cloud:-> 
	
every device connected to internet has a unique numerical address called as IP address
IP Address:Address of a machine connected to a internet
NAT:network address translator or subnetting
DNS:Domain name server
what is internet: network of network
subnet:creating network inside network
DNS is cached at every router level and browser level
rolling updates:
EC2: elastic compute cloud - server -- core of aws - every other service of aws is mostly going to use ec2

** if you don't want to use test case then you can mark @Ignore annotation on that test case

====25/10/2024===========
what is angular: it is frontend JavaScript framework ,it helps with building interactive, modern web interface
it is also a collection of tools and features, CLI, Debugging tools and IDE plugins

just JavaScript is imperative code(step-by-step) instructions in code that tell the browser what to do
eXample:1.find Dom elements and store in variable
	2.add event listeners to element
	3.in trigger funcs find another elements and so on
with Angular u write declarative code that is define the target UI state and how they change and let angular do the rest:
simplifies the process of building complex and interactive web user interfaces 

====11/11/2024======
why a framework:

Typescript is a javascript superset:an extension of java script
typescript is not an angular feature but can be used independently

@component is here in angular component contains selector,templateUrl and standalone and style
this style we can define in 3 ways
	styles as an array
	styleUrls and 
	styleUrl

Markup means HTML 
in angular change detection work using Zone.js
Angular change detection Mechanism using Zone.js and Signals
INTRO to SIGNALS in Angular
Using signals to notify angular about value changes and required UI updates supported since angular 16

A Signal is an object that stores a value(any type of value, including nested objects) 
==========13/12/2024=============
What does ! do?
The ! operator tells TypeScript that you assure the compiler the variable or property will not be null or undefined at runtime, even though TypeScript’s strict type checking might otherwise consider it potentially null or undefined.

The ! after name is a non-null assertion operator, telling TypeScript: "I promise that name will be assigned a value before it's used, so don’t warn me about it possibly being null or undefined."

same we have ? and | symbols in angular which have some meaning

study about find and filter in built methods in JavaScript or Typescript

insted of structural directives  like ngFor or ngIF we can use @For , @if in angular 17 in html files to check the conditions

dynamic styling with class bindings eg;[class.active]="selected" this selected is coming from an parent component

======14/11/2024============
Directives: with Angular enhance elements by adding so called directives to them
Directive unlike components dont have templates

components are directives , directives with templates

content-projection with ng-content

if you want to use same  styling or one styling for some of the components then we will create a shared component where we have styling and we will share that component with other components 

=========15/11/2024==========
what is static website and dynamic website

HTML:content,
css:presentation
javascript:dynamic effects and web application

node v16.20.2
npm 8.19.4


========23/11/2024============
Hyper text markup language used to structure and describe something(using elements eg:<p>,<h1> and we have all other elements)

for elements we have opening and closing tag
for some elemets we have only opening tag
in between opening and closing tag we have content of the element
Structure of a HTML Document
HTML doc contains head and body:head contains title and css links and other metadata
<html lang="en"> means this HTML is in English langugae
Body:contains all the doc info
there are six types of headings, h1,h2,h3,h4,h5,and h6--heading are basically to breakup text

for bold letters use <b> element  we can use the <strong> also

for italic we can give <i> element but we can give <em> emphasize 

lists in HTML we have orderedlist <ol> and unordered lists <ul>

img element dosent have any tag it has some attributes one is src which shows the image and other is the alt:which describes the image or text and it contains height and width

HyperLinks:
	to create a link we use <a> tag Anchor tag
href property makes and anchor tag a link
we can create an empty link also href="#"

structuring the HTML doc using some elements like navigation tabs,containers, divs, headers, article and footer

<aside> tag is used to give some secondary info
semantic HTML:a certain elements has some meaning and purpose attached to them  Not all the elements in the HTML are semantic eg:strong, em tags

some of the vscode extensions image preview,color highlite,auto rename tag

==CSS Fundamentals==
CSS: Cascading Style Sheet visual style and presentation
selector {
property:value}

types of css: inline , internal and external css
inline css :writing the css in inside of the elements
internal css :write the elements in the <style tag> and define elemnt styles there
external  CSS: create a separate css file and link it to the HTML file in head element

we have inheritance in css:

text-transform:it will transform the text into uppercase or lowercase and others

line-height:it will define the height between the lines
normal selectors,decendent electors
desendent selector:while styling the elements we will select the element which is indside the selector that is <footer><p></p></footer>
now for styling the paragraph in style.css footer p{ color:red} this is called decendent selector

Classes and ID selector:create a class or ID to the HTML elements and style based on the ID or class selector

for class selector we use . to indicate in css file
for ID selector we use #

PseudoClassess-- if youwant to style only a single list in ol or ul then we use this pseudi classes eg:li:first-child{color:res}
and li:nth-chile(2) - it will style the 2nd list

anchor tag style a:link,a:visited,a:hover,a:active we can style all of these

we can have multiple classes to an html element

**conflicts between css selectors
priority between selectors highest priority is for !important marked style , inline style, ID and then Class selector and then element selector

inheritance in css 
universal selector (simply selects every element on the page)
***********CSS Box Model:*************
css box model contains content,content has height and width,and then padding and then border and then margin

padding:20px 40px means 20px is for top and bottom and 40px is for left and right

create space between outside the element or between the elements use margins

whenever you need space between inside an element then use padding

centure a page inside a browser

types of css box model*******
inline boxes and block level 






=====DOCKER=========
application layer taks with OS Kernal , kernal tals with hardwere 
using docker-compose we can build and start an image and container

===Kubernets===

A Kubernetes cluster is a set of machines (either physical or virtual) that run Kubernetes and host applications.

Kubernetes contains the two nodes, 1.master Node and 2.worker Node(contains all the pods(contains the containers))
master node:contains the (APIServer,Schedular,Controller Manager,and etcd)
1.intro to Kubenetes(Kubernetes Architecture)
2.components of Kubernetes(Pod,Service,configmap,secret,Volume,ingress,deployment,statefull,DeamonSet)
POD==== abstraction of containers
what is POD: small unit in kubernetes, abstraction over container, usually one application per pod, each pod gets it own IP address to talk to each other
Service=== for communicate
what is Service:service is an static IP address (permanant IP address), lifecycle of pod and service are not connected,
Ingress===route traffic into cluster
what is Ingress:instead of going to service when your request, the request goes to Ingress
ConfigMap====external configuration
what is configMap:External configuration fo Your application(config map is only for non-confedential data only)
Secret===external configuration(using encodes way)
what is secret:it is like config map only but used to store secret Data(stores the data in base64 encoded format), Reference secret in deployment or POD
volume====== data persistent
what is volume:Storage on local machine or remote, outside of the k8 cluser Note:kubernetes dosent manage data persistance
Deployments===replicating or pOD blueprints for stateless apps 
what is deployment:blueprint of pods,abstraction of pods, DB cant be replicate via the Deployment
statefull===replicating or pOD blueprints for statefull apps eg:liek data bases
what is statefull: for statefull apps like(mysql,mongoDB,and elastci search), Deployment is for stateless apps, statefullset is for statefull apps or databases

** All the configuration in kubernetes goes through a master node with a process called APIServer

each configuration file(it is in YAML Format) contains three parts 1.metadata, 2.specifiction,3.status(it is automatically generated and added by kubernetes)

===kubernets ** fundamantal concepts**============
1.learn why
2.Architecture
3.core objects in K8
4.how k8 works
5.interact with k8 files
6.manifest files
7.troubleshooting
8.misconfigurations
9.heml charts        

Wwhat is Kubernetes:Kubernetes is opensource container orchestration tool Developed By google ,Helps manage containerized applications helps to manage in different deployment environments

what probles does kubernetes solves?: and what are the tasks of orchestration tool?:
cant we stop pods in kubernetes?:
	In Kubernetes (and Minikube), pods themselves cannot be "stopped" in the traditional sense (like pausing or stopping a service). Kubernetes is designed to ensure that pods in a deployment, replica set, or other workload remain in a running state as long as their managing resources exist.

In Kubernetes we cant stop the pods, insted we can scale then like by setting the repllicas to 0, later if you want that pod to be up and running then just set replicas to 1
	eg:kubectl scale deployment deployment-name --replicas=1
	eg:kubectl scale deployment deployment-name --replicas=0
if youwant u can delete the pod  or u can delete the entire deployment
	eg:kubectl delete pod pod-name
	eg:kubectl delete deployment deployment-name
If you want to "pause" the Minikube environment without entirely stopping it, use:
	minikube pause 
	minikube unpause
Pods in Kubernetes are considered ephemeral(short-lived or Temporary) because they are not permanent. 
If a pod crashes, Kubernetes doesn't repair it—it creates a new one instead, based on its configuration. This ensures high availability and flexibility.


============04/12/2024===============
NGINX:===

a web server refers to both the physical machine and softwere running on the machine
primary function is to serve web pages to client browser

a web server that takes HTTP request and responds with an HTTP responce 
a piece of softwere that is runs on server machine and can responds to requests from a broswer that webserver is called NGINX(NGINX is a high performance wens server)

Nginx as a LOAD BALANCEr:
	distribute incoming traffic across multiple backend servers

PROXY:= acting on behalf of another
proxy server:
	 intermediary server that forwards clinet request to other servers

caching is core function of NGINX proxy

NGINX can act as LOAD BALANCER, CACHING and SECURITY and compression and segmentation

Nginx can handle SSL/TSL encryption and decryption

Nginx Proxy can compress the responce to improve bandwidth usage and improve load times
segmentation-sending responce in chunks breaks the files into smaller chunks

difference between Apache and Nginx

docker-compose up --build -d

Nginx Worker_processes:(it is a Directive )
	controls how many parallel process Nginx spawns tohandle client request
what is worker processes?: 
	insted of using a new process for every incoming connection, Nginx uses a worker processes that handles many connections using a single threaded event loop

what does the number represent?:
	the value is no of worker process Nginx should create
	each worker processess runs independently and can handle its own set of connections

	This Configuration directly influences how well it can handle traffic(performance)
the no of worker process is equal to no of cpu cores
Worker_processes auto:=
	Nginx automatically detects the no of CPU cores avilable on the server and starts a corresponding no of worker nodes
worker_connections:
per worker processess how many simultaneously connections can be opend :Default is 512
if you have one Worker_processes you will be able to serve 1024 Clinets

Server Block:
	Defines how nginx should handle request for a particular domain or IP address
	how to listen for connections:
		listen :the IP address and port on which teh server will accepts request
		server-name:which domain or IP address this server block should respond to
		location Block: how specific types of requests(such as URLS or file types) should be handled
			proxy_pass:tells Nginx to pass tehrequest to another service making it act as reverse proxy
		Upstream Blocks:refers to servers that nginx forwards request to
		upstream_server: refers to traffic going from a client toward the source or higher-level infra in this case application server
		downstream_server:traffic going back to the client is downstream

we need to tell Nginx to include the corresponding MIME types in the content-type response header when sending a file
this helps the clinet understand how to process or render the file

	which domain or subdomain the config applies to
	how to route the request

HTTP is the foundation of world wide web:and default protocol for web communication
enabling the data exchange between web broswerand web servers
URL:Uniform REsource Locater is an address of the server that is hosting the web application 
80 is the default port where all the web applications run
443 is the default port for ssl
SSL: 
	SSL certificates enable encryption by using pblic-key cryptography
	when a user connects to a website via HTTPs, the web server provides its ssl certificate , which contains a public key
openssl:
	open-source tool to generate keys, certificates and managing secure connections
	CMD for generating openssl certificate:
		openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout nginx-selfsigned.key -out nginx-selfsigned.crt
		openssl req:
			initiates a certificate request generation process
		-x509:
			Tells openssl to output a certificate in this standard certificate format
		-node:
			Tells openssl not to encrypt the private key with the passphare
		-newkey rsa:2048:
			ceates a 2048 bit RSA key pair(RSA is commonly public-key encryption algo)
		
Nginx-Configuration:
	the main config file is typically names "nginx.config" and usually located in the "/etc/nginx" folder
	Using custom syntax comprising Directive and Blocks
Location directive in the Nginx config file says how the server should process specific types of request
specify the location that contains your file
 we can use NGINX in kubernets also like Ingress Controller :
	it handles the routing to the appropriate service based on rules defined in an ingress source
 what is Ingress Controller:
	Aspecialized load balancer for managing ingress(incoming) traffic in kubernetes
Configuring Nginx Proxy:

301:
	Redirects the Client(browser) to HTTPS using 301 status code, which indicate a permanant Redirect
	



